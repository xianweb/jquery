(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{58:function(e,i,t){"use strict";t.r(i);var l=t(0),v=Object(l.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,i=e.$createElement,t=e._self._c||i;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"筛选"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#筛选","aria-hidden":"true"}},[e._v("#")]),e._v(" 筛选")]),t("h2",{attrs:{id:"过滤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤","aria-hidden":"true"}},[e._v("#")]),e._v(" 过滤")]),t("ul",[t("li",[t("code",[e._v("eq(index|-index)")]),e._v(" 根据索引值查找元素")]),t("li",[t("code",[e._v("first()")]),e._v(" 返回第一个元素")]),t("li",[t("code",[e._v("last()")]),e._v(" 返回最后一个元素")]),t("li",[t("code",[e._v("hasClass(class)")]),e._v(" 查看元素是否包含某个类，返回真或者假")]),t("li",[t("code",[e._v("filter(expr|obj|ele|fn)")]),e._v(" 筛选某个元素是否符合指定的表达式，返回筛结果")]),t("li",[t("code",[e._v("is(expr|obj|ele|fn)")]),e._v(" 判断某元素是否符合指定的表达式，返回真或者假")]),t("li",[t("code",[e._v("map(callback)")]),e._v(" 将一组元素转换成其他数组（不论是否是元素数组）")]),t("li",[t("code",[e._v("has(expr|ele)")]),e._v(" 保留包含特定后代的元素，去掉那些不含有指定后代的元素。")]),t("li",[t("code",[e._v("not(expr|ele|fn)")]),e._v(" 从匹配元素的集合中删除与指定表达式匹配的元素")]),t("li",[t("code",[e._v("slice(start,[end])")]),e._v(" 选取一个匹配的子集")])]),t("h2",{attrs:{id:"查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找","aria-hidden":"true"}},[e._v("#")]),e._v(" 查找")]),t("ul",[t("li",[t("code",[e._v("children([expr])")]),e._v(" 取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合,不含后代元素。")]),t("li",[t("code",[e._v("closest(e,[c|o|e)")]),e._v(" 从元素本身开始，逐级向上级元素（父元素）匹配，并返回最先匹配的元素。")]),t("li",[t("code",[e._v("find(e|o|e)")]),e._v(" 搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。")]),t("li",[t("code",[e._v("next([expr])")]),e._v(" 取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。")]),t("li",[t("code",[e._v("nextall([expr])")]),e._v(" 查找当前元素之后所有的同辈元素。")]),t("li",[t("code",[e._v("nextUntil([e|e][,f])")]),e._v(" 查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素为止。")]),t("li",[t("code",[e._v("parent([expr])")]),e._v(" 取得一个包含着所有匹配元素的唯一父元素的元素集合。")]),t("li",[t("code",[e._v("parents([expr])")]),e._v(" 取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。")]),t("li",[t("code",[e._v("parentsUntil([e|e][,f])")]),e._v(" 查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止。")]),t("li",[t("code",[e._v("prev([expr])")]),e._v(" 取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。")]),t("li",[t("code",[e._v("prevall([expr])")]),e._v(" 查找当前元素之前所有的同辈元素")]),t("li",[t("code",[e._v("prevUntil([e|e][,f])")]),e._v(" 查找当前元素之前所有的同辈元素，直到遇到匹配的那个元素为止。")]),t("li",[t("code",[e._v("siblings([expr])")]),e._v(" 取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合。可以用可选的表达式进行筛选。")])]),t("h2",{attrs:{id:"串联"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#串联","aria-hidden":"true"}},[e._v("#")]),e._v(" 串联")]),t("ul",[t("li",[t("code",[e._v("add(e|e|h|o[,c])")]),e._v(" 把与表达式匹配的元素添加到jQuery对象中")]),t("li",[t("code",[e._v("end()")]),e._v(' 回到最近的一个"破坏性"操作之前。即，将匹配的元素列表变为前一次的状态。')])])])}],!1,null,null,null);i.default=v.exports}}]);